///
/// Generated by bookexcel
/// Do't modify this file directly, new partial class file instead
///

using System;
using System.Collections;
using System.Collections.Generic;
using LitJson;
using bookrpg.config;
using UnityEngine;

{% if ($package != ''): %}
namespace {%$package%} 
{
{% endif; %}
    public partial class {%$managerClassName%} : 
        {% if ($TKey1 && $TKey2): %}
        {%$managerParentClass%}<{%$TKey1%}, {%$TKey2%}, {%$TItem%}>
        {% elseif ($TKey1): %}
        {%$managerParentClass%}<{%$TKey1%}, {%$TItem%}>
        {% else: %}
        {%$managerParentClass%}<{%$TItem%}>
        {% endif; %}
    {
        public {%$managerClassName%}()
        {
            this.setParser(new {%:ucfirst($fileFormat)%}Parser());
        }

        {% 
            $nameIndex = array_search('itemName', $nameRow);
            $typeIndex = array_search('itemType', $nameRow);
            $valueIndex = array_search('itemValue', $nameRow);
            foreach ($dataRow as $row): 
            $type = $this->convertType($row[$typeIndex]);
            $name = $row[$nameIndex];
        %}
        public {%$type%} {%$name%} { get; protected set; }
        {% endforeach; %}

        public override bool init(string text, string format=null)
        {
            if (base.init(text, format)) {
                {% 
                    foreach ($dataRow as $row): 
                    $name = $row[$nameIndex];
                    $type = $this->convertType($row[$typeIndex]);
                %}
                this.{%$name%} = ({%$type%})getItem("{%$name%}").value;
                {% endforeach; %}
                return true;
            }
            return false;
        }
    }
{% if ($package != ''): %}
}
{% endif; %}