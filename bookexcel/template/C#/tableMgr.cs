///
/// Generated by bookexcel
/// Do't modify this file directly, new partial class file instead
///

using System;
using System.Collections;
using System.Collections.Generic;
using LitJson;
using bookrpg.config;
using UnityEngine;

{% if ($package != ''): %}
namespace {%$package%} 
{
{% endif; %}
    public partial class {%$managerClassName%} : 
        {% if ($TKey1 && $TKey2): %}
        {%$managerParentClass%}<{%$TKey1%}, {%$TKey2%}, {%$TItem%}>
        {% elseif ($TKey1): %}
        {%$managerParentClass%}<{%$TKey1%}, {%$TItem%}>
        {% else: %}
        {%$managerParentClass%}<{%$TItem%}>
        {% endif; %}
    {
        public {%$managerClassName%}()
        {
            this.setParser(new {%:ucfirst($fileFormat)%}Parser());
        }

        {% 
            foreach ($fields as $field): 
            $ctype = $this->convertType2($field['type']);
            if ($field['createQuery'] && $ctype[1] == 0) :
            $name = $field['name'];
            $uname = ucfirst($name);
            $type = $ctype[0];
        %}
        public {%$className%} getItemBy{%$uname%}({%$type%} value)
        {
            foreach (var item in itemList) 
            {
                if (item.{%$name%} == value) {
                    return item;
                }
            }

            return null;
        }

        public IList<{%$className%}> getItemsBy{%$uname%}({%$type%} value)
        {
            var items = new List<{%$className%}>();
            foreach (var item in itemList) 
            {
                if (item.{%$name%} == value) {
                    items.Add(item);
                }
            }
            return items;
        }

        {% endif; %}
        {% endforeach; %}
    }
{% if ($package != ''): %}
}
{% endif; %}